Функция ПолучитьСписокИД() Экспорт
	
	м = Новый Массив;
	м.Добавить("ЭкспортСДЭК");
	Возврат м;
	
КонецФункции

Процедура ПрименитьНастройку() Экспорт
	
	ЗапущеноРегламентнымЗаданием = Истина;
	
	Настройки = ОбщегоНазначения.ХранилищеВариантовОтчетов_Загрузить("НастройкиРоботаЭкспортСДЭК", "НастройкиРоботаЭкспортСДЭК",, СокрЛП(Константы.ОсновнаяФирма));	
	Попытка
		СписокНастроекДляРобота = Настройки.СписокНастроекДляРобота;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьОбработку() Экспорт
	
	Обр = Неопределено;
	_Ссылка = Справочники.ВнешниеОбработки.НайтиПо_ИД(ПолучитьСписокИД()[0]);
	Если НЕ (_Ссылка = Неопределено) Тогда
		Обр = _Ссылка.ПолучитьОбъект();
		Если Обр.Заблокирован() Тогда
			Возврат;
		КонецЕсли;
		Обр.Заблокировать();
	КонецЕсли;	
	
	Каталог = Неопределено;
	
	Попытка
		
		Настройки = ОбщегоНазначения.ХранилищеВариантовОтчетов_Загрузить("НастройкиРоботаЭкспортСДЭК", "НастройкиРоботаЭкспортСДЭК",, СокрЛП(Константы.ОсновнаяФирма));	
		Попытка
			СписокНастроекДляРобота = Настройки.СписокНастроекДляРобота;
		Исключение
		КонецПопытки;
		
		Если СписокНастроекДляРобота.Количество() > 0  Тогда
			
			Для Каждого ЭлСп Из СписокНастроекДляРобота Цикл	
				
				ТекНастройка = Неопределено;
				Попытка
					УстановитьПривилегированныйРежим(Истина);
					ТекНастройка = ХранилищеВариантовОтчетов.Загрузить("ЭкспортСДЭК", ЭлСп.Значение,, "Все");
					УстановитьПривилегированныйРежим(Ложь);		
				Исключение
				КонецПопытки;
				
				Если ТекНастройка = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяСервера = ТекНастройка.ИмяСервера;
				АдресСервиса = ТекНастройка.АдресСервиса;
				АдресПроверки = ТекНастройка.АдресПроверки;
				АдресПодтверждения = ТекНастройка.АдресПодтверждения;
				Логин = ТекНастройка.Логин;
				Пароль = ТекНастройка.Пароль;
				Попытка
					Каталог = ТекНастройка.Каталог;
				Исключение
				КонецПопытки;

			КонецЦикла;
		КонецЕсли;
	Исключение
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК", ОписаниеОшибки(),"ЭкспортСДЭК");
	КонецПопытки;
	
	РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК", "Подключение..","ЭкспортСДЭК");
	
	Ответ = "";
	ОтветОбъект = Неопределено;
	Текст = "";
	ТекстОшибки = "";
	
	Если ЗначениеЗаполнено(ИмяСервера) Тогда
		Сервер = ИмяСервера;
	Иначе 
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК", "ОШИБКА ПОДКЛЮЧЕНИЯ: Не заполнено ИмяСервера! Проверьте настройки!","ЭкспортСДЭК");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресПроверки) Тогда
		Адрес = АдресПроверки;
	Иначе
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК", "ОШИБКА ПОДКЛЮЧЕНИЯ: Не заполнено АдресПроверки! Проверьте настройки!","ЭкспортСДЭК");
		Возврат;
	КонецЕсли;
	
	//Проверка доступности сервиса
	СоединениеHTTP = HTTP_ПолучитьТекст(Сервер,Адрес,,Ответ,Текст,Логин,Пароль);
	Если СоединениеHTTP = Ложь Тогда
		Если Ответ.КодСостояния = "500" Тогда
			ТекстОшибки = "ПодготовитьПодтверждениеПрихода_СДЭК: 500 - внутренняя ошибка сервиса";
		ИначеЕсли Ответ.КодСостояния = "401" Тогда
			ТекстОшибки = "ПодготовитьПодтверждениеПрихода_СДЭК: 401 - ошибка авторизации!";
		Иначе	
			ТекстОшибки = "ПодготовитьПодтверждениеПрихода_СДЭК: Не удалось подключиться! Код состояния: " + Ответ.КодСостояния;
		КонецЕсли;
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК", ТекстОшибки,"ЭкспортСДЭК" , Новый Структура("Сервер,Адрес", сервер, адрес));
		Возврат;
	Иначе
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК", "Подключение" + Ответ.КодСостояния,"ЭкспортСДЭК" , Новый Структура("Сервер,Адрес", сервер, адрес));
	КонецЕсли;

	РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК", "Получение данных..","ЭкспортСДЭК");

	Если ПолучитьДанныеСДЭК(Сервер,АдресСервиса,АдресПодтверждения,Логин,Пароль,Каталог) = ЛОЖЬ Тогда	
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК", "Не удалось получить данные!","ЭкспортСДЭК");
	Иначе
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК", "Данные получены","ЭкспортСДЭК");
	КонецЕсли;
	
	РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК", "Отправка данных..","ЭкспортСДЭК");
	
	Если ОтправитьДанныеСДЭК(Сервер,АдресСервиса,Логин,Пароль) = ЛОЖЬ Тогда
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК", "Не удалось отправить данные!","ЭкспортСДЭК");
	Иначе
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК", "Данные отправлены","ЭкспортСДЭК");
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ВыполнитьПроверку(Сервер, Адрес, Логин, Пароль) Экспорт
	
	Ответ = "";
	ОтветОбъект = Неопределено;
	Текст = "";
	ТекстОшибки = "";
	
	//Проверка доступности сервиса
	СоединениеHTTP = HTTP_ПолучитьТекст(Сервер,Адрес,,Ответ,Текст,Логин,Пароль);
	Если СоединениеHTTP = Ложь Тогда
		Если Ответ.КодСостояния = "500" Тогда
			ТекстОшибки = "ПодготовитьПодтверждениеПрихода_СДЭК: 500 - внутренняя ошибка сервиса";
		ИначеЕсли Ответ.КодСостояния = "401" Тогда
			ТекстОшибки = "ПодготовитьПодтверждениеПрихода_СДЭК: 401 - ошибка авторизации!";
		Иначе	
			ТекстОшибки = "ПодготовитьПодтверждениеПрихода_СДЭК: Не удалось подключиться! Код состояния: " + Ответ.КодСостояния;
		КонецЕсли;
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК", ТекстОшибки,"ЭкспортСДЭК" , Новый Структура("Сервер,Адрес", сервер, адрес));
		Возврат;
	Иначе
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК", "Подключение" + Ответ.КодСостояния,"ЭкспортСДЭК" , Новый Структура("Сервер,Адрес", сервер, адрес));
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеСДЭК(Сервер,Адрес,АдресПодтверждения,Логин,Пароль,Каталог,ВыбранныйФайл = Неопределено) Экспорт
	
	Ответ = "";
	Текст = "";
	ПолученныеДанные = Новый Структура;
	СписокТоваров = "";
	СписокДокументов = "";
	НомерСообщения = "";
	
	Если ВыбранныйФайл = Неопределено Тогда
		СоединениеHTTP = HTTP_ПолучитьТекст(Сервер,Адрес,,Ответ,Текст,Логин,Пароль);
		
		Если СоединениеHTTP = Ложь Тогда
			Если Ответ <> Неопределено Тогда
				РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.ПолучитьДанныеСДЭК()", "Не удалось установить соединение! " + Ответ.КодСостояния,"ЭкспортСДЭК");
			Иначе
				РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.ПолучитьДанныеСДЭК()", "Не удалось установить соединение!","ЭкспортСДЭК");
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;	
		
		ПолученныеДанные = фПрочитатьJSON(Ответ.ПолучитьТелоКакСтроку());
		
	Иначе
		
		ПолученныеДанные = фПрочитатьJSON(ВыбранныйФайл);
		
	КонецЕсли;
	
	РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.ПолучитьДанныеСДЭК()", "Полученные данные","ЭкспортСДЭК",ПолученныеДанные);
	
	Если НЕ ПолученныеДанные.Свойство("message",НомерСообщения) Тогда
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.ПолучитьДанныеСДЭК()", "Не удалось получить данные, отсутствует номер сообщения!","ЭкспортСДЭК",ПолученныеДанные);
		Возврат ЛОЖЬ;
	Иначе
		Если НЕ(ТипЗнч(НомерСообщения) = Тип("Строка") И НомерСообщения <> "") Тогда
			РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.ПолучитьДанныеСДЭК()", "Не удалось получить данные, отсутствует номер сообщения!","ЭкспортСДЭК",ПолученныеДанные);
			Возврат ЛОЖЬ;
		КонецЕсли;
	КонецЕсли;
	
	Если Каталог <> Неопределено И ЗначениеЗаполнено(Каталог) Тогда
		
		ТекстовыйФайл = Новый ТекстовыйДокумент;
		ТекстовыйФайл.УстановитьТекст(Ответ.ПолучитьТелоКакСтроку());
		ТекстовыйФайл.Записать(Каталог + НомерСообщения + "_" + Формат(ТекущаяДата(),"ДФ=ddMMyyyy") + ".txt",КодировкаТекста.UTF8,Символы.ВК + Символы.ПС);
		
	КонецЕсли;
	
	ТоварыЗагружены = ЛОЖЬ;
	Если ПолученныеДанные.Свойство("Goods",СписокТоваров) Тогда
		Если ТипЗнч(СписокТоваров) = Тип("Массив") Тогда
			Если НЕ ПроверитьСоздатьТовар(СписокТоваров)Тогда
				РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.ПолучитьДанныеСДЭК()", "Не удалось получить данные, ошибка при создании/проверке товаров!","ЭкспортСДЭК",СписокТоваров);
				Возврат ЛОЖЬ;
			ИначеЕсли СписокТоваров.Количество() > 0 Тогда
				ТоварыЗагружены = Истина;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	ДокументыЗагружены = ЛОЖЬ;
	Если ПолученныеДанные.Свойство("orders",СписокДокументов) Тогда		
		Если ТипЗнч(СписокДокументов) = Тип("Массив") Тогда			
			Если НЕ ПроверитьСоздатьДокументы(СписокДокументов,НомерСообщения) Тогда
				РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.ПолучитьДанныеСДЭК()", "Не удалось получить данные, ошибка при создании/проверке документов!","ЭкспортСДЭК",СписокДокументов);
				Возврат ЛОЖЬ;
			ИначеЕсли СписокДокументов.Количество() > 0 Тогда
				ДокументыЗагружены = Истина;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Если (ТоварыЗагружены ИЛИ ДокументыЗагружены) И ВыбранныйФайл = Неопределено Тогда	
		//Отправляем подтверждение
		АдресСНомером = "" + АдресПодтверждения + "/" + СокрЛП(НомерСообщения);
		СоединениеHTTP = HTTP_ПолучитьТекст(Сервер,АдресСНомером,,Ответ,Текст,Логин,Пароль);
		
		Если СоединениеHTTP = Ложь Тогда
			Если Ответ <> Неопределено Тогда
				РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.ПолучитьДанныеСДЭК()", "Не удалось отправить подтверждение сообщения! " + Ответ.КодСостояния,"ЭкспортСДЭК",ПолученныеДанные);
			Иначе
				РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.ПолучитьДанныеСДЭК()", "Не удалось отправить подтверждение сообщения!","ЭкспортСДЭК",ПолученныеДанные);
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.ПолучитьДанныеСДЭК()", "Подтверждение отправлено. Номер сообщения: " + НомерСообщения,"ЭкспортСДЭК",ПолученныеДанные);
	ИначеЕсли ВыбранныйФайл = Неопределено Тогда
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.ПолучитьДанныеСДЭК()", "Подтверждение не отправлено. Нет входящих данных!","ЭкспортСДЭК",ПолученныеДанные);
	Иначе
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.ПолучитьДанныеСДЭК()", "Подтверждение не отправлено. Файл загружен вручную!","ЭкспортСДЭК",ПолученныеДанные);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОтправитьДанныеСДЭК(Сервер,Адрес,Логин,Пароль)
	
	ТЗИнвойс = ПолучитьТЗИнвойс();
	
	Если ТЗИнвойс.Количество() > 0 Тогда
		Для каждого Стр из ТЗИнвойс Цикл
			ПодготовитьПодтверждениеПрихода_СДЭК(Стр.ПКС,Сервер,Адрес,Логин,Пароль);
		КонецЦикла;
	КонецЕсли;
	
	ТЗРКС  = ПолучитьТЗРКС();
	
	Если ТЗРКС.Количество() > 0 Тогда
		Для каждого Стр из ТЗРКС Цикл
			ПодготовитьПодтверждениеРасхода_СДЭК(Стр.Ссылка,Сервер,Адрес,Логин,Пароль);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТЗИнвойс()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Инвойс.Ссылка КАК Ссылка,
		|	ПриходнаяКСТабличнаяЧасть.Ссылка КАК ПКС,
		|	СУММА(ВЫБОР
		|			КОГДА ЕСТЬNULL(ПриходнаяКСТабличнаяЧасть.Количество, 0) - ЕСТЬNULL(ПриходнаяКСТабличнаяЧасть.Отгружено, 0) = 0
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Недостача
		|ИЗ
		|	РегистрСведений.Интеграция_ДопРеквизиты КАК Интеграция_ДопРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Инвойс КАК Инвойс
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяКС.ТабличнаяЧасть КАК ПриходнаяКСТабличнаяЧасть
		|			ПО Инвойс.Ссылка = ПриходнаяКСТабличнаяЧасть.Ссылка.ДокументОснование
		|		ПО Интеграция_ДопРеквизиты.Документ = Инвойс.Ссылка
		|ГДЕ
		|	ЕСТЬNULL(ПриходнаяКСТабличнаяЧасть.Ссылка, 0) <> 0
		|	И Инвойс.ГрузоОтправитель = &ГрузоОтправитель
		|	И ПриходнаяКСТабличнаяЧасть.Ссылка.ДатаОтправкиПодтвержденияПриемки = ДАТАВРЕМЯ(1, 1, 1)
		|	И Интеграция_ДопРеквизиты.Имя = &Имя
		|	И ЕСТЬNULL(Интеграция_ДопРеквизиты.Значение, 0) <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Инвойс.Ссылка,
		|	ПриходнаяКСТабличнаяЧасть.Ссылка";
	
	Запрос.УстановитьПараметр("ГрузоОтправитель", Справочники.ЮрЛица.НайтиПоНаименованию("СДЭК-ГЛОБАЛ ООО"));
	Запрос.УстановитьПараметр("Имя", "message");
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;

КонецФункции

Функция ПолучитьТЗРКС()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасходнаяКС.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ЖурналСтатусов.Дата) КАК Дата
		|ПОМЕСТИТЬ втСтатусМаксимум
		|ИЗ
		|	Документ.РасходнаяКС КАК РасходнаяКС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналСтатусов КАК ЖурналСтатусов
		|		ПО (ЖурналСтатусов.Документ = РасходнаяКС.Ссылка)
		|ГДЕ
		|	РасходнаяКС.ЮрЛицо = &ЮрЛицо
		|	И РасходнаяКС.ДатаОтправкиПодтвержденияОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
		|	И РасходнаяКС.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходнаяКС.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСтатусМаксимум.Ссылка КАК Ссылка,
		|	ЖурналСтатусов.Статус КАК Статус
		|ИЗ
		|	втСтатусМаксимум КАК втСтатусМаксимум
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналСтатусов КАК ЖурналСтатусов
		|		ПО втСтатусМаксимум.Ссылка = ЖурналСтатусов.Документ
		|			И втСтатусМаксимум.Дата = ЖурналСтатусов.Дата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Интеграция_ДопРеквизиты КАК Интеграция_ДопРеквизиты
		|		ПО втСтатусМаксимум.Ссылка = Интеграция_ДопРеквизиты.Документ
		|ГДЕ
		|	ЖурналСтатусов.Статус = &Статус
		|	И Интеграция_ДопРеквизиты.Имя = &Имя
		|	И ЕСТЬNULL(Интеграция_ДопРеквизиты.Значение, 0) <> 0";
	
	Запрос.УстановитьПараметр("Статус", Перечисления.ВидыСтатусДокумента.Отобран);
	Запрос.УстановитьПараметр("ЮрЛицо", Справочники.ЮрЛица.НайтиПоНаименованию("СДЭК-ГЛОБАЛ ООО"));
	Запрос.УстановитьПараметр("Имя", "message");
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ПодготовитьПодтверждениеПрихода_СДЭК(Док,Сервер,Адрес,Логин,Пароль)
	
	Ответ = "";
	ОтветОбъект = Неопределено;
	Текст = "";
	ТекстОшибки = "";
	
	Если ЗначениеЗаполнено(Док.ДатаОтправкиПодтвержденияПриемки) Тогда
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.ПодготовитьПодтверждениеПрихода_СДЭК", "У документа установлена ДатаОтправкиПодтвержденияПриемки","ЭкспортСДЭК" , Новый Структура("Док", Док));
		Возврат;
	КонецЕсли;
		
	ДопРеквизиты = РегистрыСведений.Интеграция_ДопРеквизиты.ПолучитьРеквизиты(Док.ДокументОснование);
	
	СтруктураОтправки = Новый Структура;
	СтруктураОтправки.Вставить("statuses",Новый Массив);
	СтруктураОтправки.Вставить("docs",Новый Массив);
	
	стСтатус = Новый Структура;
	стСтатус.Вставить("orderType", ДопРеквизиты.orderType);
	стСтатус.Вставить("orderUID", ДопРеквизиты.orderUID);
	стСтатус.Вставить("status", ПолучитьСтатусСДЭК(Док.ДокументОснование));
	СтруктураОтправки.statuses.Добавить(стСтатус);
	
	стДок = Новый Структура;
	стДок.Вставить("docType","purchase");
	стДок.Вставить("docUID",Строка(Док.УникальныйИдентификатор()));
	стДок.Вставить("orderUID", ДопРеквизиты.orderUID);
	стДок.Вставить("goods",Новый Массив);
	
	Для каждого Стр Из Док.ТабличнаяЧасть Цикл
		
		НовСтрока = Новый Структура;
		НовСтрока.Вставить("goodUID",Стр.Товар.АртикулВнеш);
		НовСтрока.Вставить("baseunit",Стр.Товар.БазоваяЕдиница.ЕдиницаПоКлассификатору.Код);
		НовСтрока.Вставить("amount", Стр.Количество * Стр.Коэфф);
		НовСтрока.Вставить("packUID","00000000-0000-0000-0000-000000000000");
		НовСтрока.Вставить("packAmount",Стр.Количество * Стр.Коэфф);
		стДок.goods.Добавить(НовСтрока);
		
	КонецЦикла;
	СтруктураОтправки.docs.Добавить(стДок);
	
	ЗаписьJSON = Новый ЗаписьJSON;			
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,СтруктураОтправки);			
	
	Результат = ЗаписьJSON.Закрыть();
	
	Отправлено = HTTP_ОтправитьJSON(Сервер, Адрес, СтруктураОтправки,, Ответ, ОтветОбъект,Неопределено,Логин,Пароль); 
	
	Если Отправлено Тогда
		ДокОбъект = Док.ПолучитьОбъект();
		ДокОбъект.ДатаОтправкиПодтвержденияПриемки = ТекущаяДата();
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.ПодготовитьПодтверждениеПрихода_СДЭК", "Отправлено подтверждение по документу" + Док,"ЭкспортСДЭК" , СтруктураОтправки);
	Иначе
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.ПодготовитьПодтверждениеПрихода_СДЭК", "Не удалось отправить подтверждение по документу" + Док,"ЭкспортСДЭК" , СтруктураОтправки);
		Возврат;
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

Процедура ПодготовитьПодтверждениеРасхода_СДЭК(Док,Сервер,Адрес,Логин,Пароль)
	
	Ответ = "";
	ОтветОбъект = Неопределено;
	Текст = "";
	ТекстОшибки = "";
	//Сервер = "http://3pl-trade-1c.cdek.ru";
	//Адрес = "1c_trade/hs/3PLExchange[/test]";
	//Если ИнтернетЗапросы.HTTP_ПолучитьТекст(Сервер,Адрес,,Ответ,Текст) = Ложь Тогда
	//	Если Ответ.КодСостояния = "500" Тогда
	//		ТекстОшибки = "ПодготовитьПодтверждениеПрихода_СДЭК: 500 - внутренняя ошибка сервиса";
	//	ИначеЕсли Ответ.КодСостояния = "401" Тогда
	//		ТекстОшибки = "ПодготовитьПодтверждениеПрихода_СДЭК: 401 - ошибка авторизации!";
	//	Иначе	
	//		ТекстОшибки = "ПодготовитьПодтверждениеПрихода_СДЭК: Не удалось подключиться! Код состояния: " + Ответ.КодСостояния;
	//	КонецЕсли;
	//	РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ОтправкаЭлектроннойДокументации", ТекстОшибки, , Новый Структура("Сервер,Адрес", сервер, адрес));
	//	Сообщить(ТекстОшибки);
	//	Возврат;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(Док.ДатаОтправкиПодтвержденияПриемки) Тогда
	//	РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ОтправкаЭлектроннойДокументации", "ПодготовитьПодтверждениеПрихода_СДЭК: У документа установлена ДатаОтправкиПодтвержденияПриемки", , Новый Структура("Док", Док));
	//	Возврат;
	//КонецЕсли;
		
	ДопРеквизиты = РегистрыСведений.Интеграция_ДопРеквизиты.ПолучитьРеквизиты(Док);
	
	ТипДокументаСДЭК = "sale";
	Если ДопРеквизиты.orderType = "сustomer order" Тогда
		ТипДокументаСДЭК = "sale";
	ИначеЕсли ДопРеквизиты.orderType = "move order" Тогда
		ТипДокументаСДЭК = "movement";
	ИначеЕсли ДопРеквизиты.orderType = "domestic order" Тогда
		ТипДокументаСДЭК = "cancel";
	КонецЕсли;
	
	СтруктураОтправки = Новый Структура;
	СтруктураОтправки.Вставить("statuses",Новый Массив);
	СтруктураОтправки.Вставить("docs",Новый Массив);
	
	стСтатус = Новый Структура;
	стСтатус.Вставить("orderType", ДопРеквизиты.orderType);
	стСтатус.Вставить("orderUID", ДопРеквизиты.orderUID);
	стСтатус.Вставить("status", ПолучитьСтатусСДЭК(Док));
	СтруктураОтправки.statuses.Добавить(стСтатус);
	
	стДок = Новый Структура;
	стДок.Вставить("docType",ТипДокументаСДЭК);
	стДок.Вставить("docUID",Строка(Док.УникальныйИдентификатор()));
	стДок.Вставить("orderUID", ДопРеквизиты.orderUID);
	стДок.Вставить("goods",Новый Массив);
	
	Для каждого Стр Из Док.ТабличнаяЧасть Цикл
		
		НовСтрока = Новый Структура;
		НовСтрока.Вставить("goodUID",Стр.Товар.АртикулВнеш);
		НовСтрока.Вставить("baseunit",Стр.Товар.БазоваяЕдиница.ЕдиницаПоКлассификатору.Код);
		НовСтрока.Вставить("amount", Стр.Количество * Стр.Коэфф);
		НовСтрока.Вставить("packUID","00000000-0000-0000-0000-000000000000");
		НовСтрока.Вставить("packAmount",Стр.Количество * Стр.Коэфф);
		стДок.goods.Добавить(НовСтрока);
		
	КонецЦикла;
	СтруктураОтправки.docs.Добавить(стДок);
	
	ЗаписьJSON = Новый ЗаписьJSON;			
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,СтруктураОтправки);			
	
	Результат = ЗаписьJSON.Закрыть();
	
	Отправлено = HTTP_ОтправитьJSON(Сервер, Адрес, СтруктураОтправки,, Ответ, ОтветОбъект,Неопределено,Логин,Пароль); 
	
	Если Отправлено Тогда
		ДокОбъект = Док.ПолучитьОбъект();
		ДокОбъект.ДатаОтправкиПодтвержденияОтгрузки = ТекущаяДата();
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.ПодготовитьПодтверждениеРасхода_СДЭК", "Отправлено подтверждение по документу" + Док,"ЭкспортСДЭК" , СтруктураОтправки);
	Иначе
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.ПодготовитьПодтверждениеРасхода_СДЭК", "Не удалось отправить подтверждение по документу" + Док,"ЭкспортСДЭК" , СтруктураОтправки);
		Возврат;
	КонецЕсли;
	
	Возврат;
	//Сообщить("ОК");
	//ЗаписьXML = Новый ЗаписьXML;
	//ЗаписьXML.УстановитьСтроку();
	//ОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(ТЗ);
	//ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	//
	//ИмяФайлаКраткое = Формат(ТекущаяДата,"ДФ='ддММгггг'") + "_" + СокрЛП(Док.ДокументОснование.НомерПриказа) + ".xml";
	//ИмяФайла = КаталогВременныхФайлов() + "\" + ИмяФайлаКраткое;
	//
	//ТекстовыйДокумент = Новый ТекстовыйДокумент;
	//ТекстовыйДокумент.ДобавитьСтроку(ЗаписьXML.Закрыть());
	//ТекстовыйДокумент.Записать(ИмяФайла);
	//
	//Если Док.ЮрЛицо.Владелец.НастройкиОтправки.Количество() > 0 Тогда
	//	НайденаяНастройкаОтправки = Док.ЮрЛицо.Владелец.НастройкиОтправки.Найти(Док.ЮрЛицо, "Юрлицо");
	//	Если НЕ (НайденаяНастройкаОтправки = Неопределено) Тогда
	//		АдресаОтправки = СтрРазделить(СокрЛП(НайденаяНастройкаОтправки.Email),",",Ложь);
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Отправлено = ОбщегоНазначения.ОтправитьПочту(АдресаОтправки,"Статус приемки = Закрыта",""+ДопРеквизиты.ТипДокументаКИС + " " + Док.ДокументОснование.НомерПриказа + " " + ТекущаяДата,ИмяФайла);
	//
	//Если Отправлено Тогда
	//	ДокОбъект = Док.ПолучитьОбъект();
	//	ДокОбъект.ДатаОтправкиПодтвержденияПриемки = ТекущаяДата;
	//	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//	Попытка
	//		УдалитьФайлы(ИмяФайла);
	//	Исключение
	//		Сообщить("Не удалось удалить временный файл!");
	//	КонецПопытки;
	//Иначе
	//	Сообщить("Не удалось отправить подтверждение!");
	//КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтатусСДЭК(Док)
	
	Если ТипЗнч(Док) = Тип("ДокументСсылка.Инвойс") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвойсТабличнаяЧасть.Ссылка КАК Инвойс,
		|	ПриходнаяКСТабличнаяЧасть.Ссылка КАК ПКС,
		|	ИнвойсТабличнаяЧасть.Товар КАК Товар,
		|	ИнвойсТабличнаяЧасть.Количество КАК КоличествоИнвойс,
		|	ПриходнаяКСТабличнаяЧасть.Количество КАК КоличествоПКС,
		|	ВЫБОР
		|		КОГДА ИнвойсТабличнаяЧасть.Количество = ПриходнаяКСТабличнаяЧасть.Количество
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Соответствие
		|ПОМЕСТИТЬ втДокТовар
		|ИЗ
		|	Документ.Инвойс.ТабличнаяЧасть КАК ИнвойсТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяКС.ТабличнаяЧасть КАК ПриходнаяКСТабличнаяЧасть
		|		ПО ИнвойсТабличнаяЧасть.Ссылка = ПриходнаяКСТабличнаяЧасть.Ссылка.ДокументОснование
		|			И ИнвойсТабличнаяЧасть.Товар = ПриходнаяКСТабличнаяЧасть.Товар
		|ГДЕ
		|	ИнвойсТабличнаяЧасть.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДокТовар.Инвойс КАК Инвойс,
		|	втДокТовар.ПКС КАК ПКС,
		|	втДокТовар.Соответствие КАК Соответствие
		|ИЗ
		|	втДокТовар КАК втДокТовар";
		
		Запрос.УстановитьПараметр("Ссылка", Док);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		ИтогС = РезультатЗапроса.Итог("Соответствие");
		
		Если ЗначениеЗаполнено(РезультатЗапроса[0].ПКС) Тогда
			Если РезультатЗапроса.Количество() = ИтогС Тогда
				Возврат "complete";
			Иначе
				Возврат "incomplete";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Док) = Тип("ДокументСсылка.РасходнаяКС") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(РасходнаяКСТабличнаяЧасть.Количество) = СУММА(РасходнаяКСТабличнаяЧасть.Заявлено) КАК Проверка
		|ИЗ
		|	Документ.РасходнаяКС.ТабличнаяЧасть КАК РасходнаяКСТабличнаяЧасть
		|ГДЕ
		|	РасходнаяКСТабличнаяЧасть.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Док);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Если РезультатЗапроса[0].Проверка Тогда
			Возврат "complete";
		Иначе
			Возврат "incomplete";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция HTTP_ПолучитьТекст(Знач _сервер, Знач _адрес = "/", Знач _https = Ложь, _ответ = Неопределено, _текст = Неопределено, Логин, Пароль) Экспорт

	_ответ = Неопределено;
	_текст = Неопределено;
	
	Если (ТипЗнч(_сервер) <> Тип("Строка")) ИЛИ (ПустаяСтрока(_сервер)) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если (ТипЗнч(_адрес) <> Тип("Строка")) ИЛИ (ПустаяСтрока(_адрес)) Тогда
		_адрес = "/";
	КонецЕсли;

	__сервер = "";
	__порт = Неопределено;
	__https = Ложь;
	ПарсингURL(_сервер, __сервер, __порт, __https);
	
	_ssl = Неопределено;
	Если (__https) ИЛИ ( (ТипЗнч(_https) = Тип("Булево")) И (_https) ) Тогда
		_ssl = Новый ЗащищенноеСоединениеOpenSSL();
	КонецЕсли;

	Попытка
		HTTP = Новый HTTPСоединение(__сервер, __порт,Логин ,Пароль , , ПолучитьТаймаут(), _ssl);
		_запрос = Новый HTTPЗапрос(_адрес);
		_запрос.Заголовки.Вставить("Host", __сервер);
		_ответ = Неопределено;
		ЗапонитьЗаголовкиЗапроса(_запрос);
		_ответ = HTTP.Получить(_запрос);
		Если ТипЗнч(_ответ) = Тип("HTTPОтвет") Тогда
			_текст = _ответ.ПолучитьТелоКакСтроку();
			Возврат (_ответ.КодСостояния = 200);
		КонецЕсли;
	Исключение
		_ошибка = ОписаниеОшибки();
		Сообщить("ЭкспортСДЭК.HTTP_ПолучитьТекст(): " + _ошибка, СтатусСообщения.ОченьВажное);
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.HTTP_ПолучитьТекст()", "ИСКЛЮЧЕНИЕ: " + _ошибка,"ЭкспортСДЭК" , Новый Структура("Сервер,Адрес", _сервер, _адрес));
	КонецПопытки;

	Возврат Ложь;

КонецФункции

// отправить и получить JSON по HTTP/HTTPS POST запросу
Функция HTTP_ОтправитьJSON(Знач _сервер, Знач _адрес = "/", _объект, Знач _https = Ложь, _ответ = Неопределено, _объект_ответ = Неопределено, Знач _заголовки = Неопределено, Логин, Пароль) Экспорт

	_ответ = Неопределено;
	_объект_ответ = Неопределено;
	
	Если (ТипЗнч(_сервер) <> Тип("Строка")) ИЛИ (ПустаяСтрока(_сервер)) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если (ТипЗнч(_адрес) <> Тип("Строка")) ИЛИ (ПустаяСтрока(_адрес)) Тогда
		_адрес = "/";
	КонецЕсли;
	
	Если ОбщегоНазначения.ПустоеЗначение(_объект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	__сервер = "";
	__порт = Неопределено;
	__https = Ложь;
	ПарсингURL(_сервер, __сервер, __порт, __https);
	
	_ssl = Неопределено;
	Если (__https) ИЛИ ( (ТипЗнч(_https) = Тип("Булево")) И (_https) ) Тогда
		_ssl = Новый ЗащищенноеСоединениеOpenSSL();
	КонецЕсли;
	
	Попытка
		стр_объект = ОбщегоНазначения.ЗначениеВJson(_объект);
	Исключение
		_ошибка = ОписаниеОшибки();
		Сообщить("ЭкспортСДЭК.HTTP_ОтправитьJSON(): преобразование в JSON: " + _ошибка, СтатусСообщения.ОченьВажное);
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.HTTP_ОтправитьJSON()", "ИСКЛЮЧЕНИЕ: " + _ошибка,"ЭкспортСДЭК" , Новый Структура("Сервер,Адрес", _сервер, _адрес));
		Возврат Ложь;
	КонецПопытки;

	стЗаголовки = Новый Соответствие;
	Если (ТипЗнч(_заголовки) = Тип("Соответствие")) ИЛИ (ТипЗнч(_заголовки) = Тип("Структура")) Тогда
		Для Каждого _кз Из _заголовки Цикл
			стЗаголовки.Вставить(_кз.Ключ, _кз.Значение);
		КонецЦикла;
	КонецЕсли;

	Попытка
		HTTP = Новый HTTPСоединение(__сервер, __порт, Логин, Пароль , , ПолучитьТаймаут(), _ssl);
		_запрос = Новый HTTPЗапрос(_адрес);
		_запрос.Заголовки.Вставить("Host", __сервер);
		Если стЗаголовки.Количество() = 0 Тогда
			ЗапонитьЗаголовкиЗапроса(_запрос);
		КонецЕсли;
		_запрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		Для Каждого _кз Из стЗаголовки Цикл
			_запрос.Заголовки.Вставить(_кз.Ключ, _кз.Значение);
		КонецЦикла;
		_запрос.УстановитьТелоИзСтроки(стр_объект, КодировкаТекста.UTF8);
		_ответ = HTTP.ОтправитьДляОбработки(_запрос);
		Попытка
			з = _ответ.ПолучитьТелоКакСтроку();
			Если ПустаяСтрока(з) Тогда
				_объект_ответ = Новый Соответствие;
			Иначе
				_ошибка = Ложь;
				_объект_ответ = ОбщегоНазначения.JsonВЗначение(з, _ошибка);
				Если _ошибка Тогда
					РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.HTTP_ОтправитьJSON()", "HTTP_RESPONSE_BODY:" + _ответ.КодСостояния,"ЭкспортСДЭК" , Новый Структура("ОбъектОтправки,ОбъектОтправки_JSON,Сервер,Адрес,HTTP_BODY", _объект, стр_объект, _сервер, _адрес, з));
				КонецЕсли;
			КонецЕсли;
		Исключение
			_ошибка = ОписаниеОшибки();
			Сообщить("ЭкспортСДЭК.HTTP_ОтправитьJSON(): преобразование из JSON: " + _ошибка, СтатусСообщения.ОченьВажное);
			РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.HTTP_ОтправитьJSON()", "ИСКЛЮЧЕНИЕ: " + _ошибка,"ЭкспортСДЭК" , Новый Структура("Сервер,Адрес", _сервер, _адрес));
			_объект_ответ = Новый Соответствие;
		КонецПопытки;
		Возврат (_ответ.КодСостояния = 200);
	Исключение
		_ошибка = ОписаниеОшибки();
		Сообщить("ЭкспортСДЭК.HTTP_ОтправитьJSON(): " + _ошибка, СтатусСообщения.ОченьВажное);
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК.HTTP_ОтправитьJSON()", "ИСКЛЮЧЕНИЕ: " + _ошибка,"ЭкспортСДЭК" , Новый Структура("Сервер,Адрес", _сервер, _адрес));
	КонецПопытки;

	Возврат Ложь;

КонецФункции

Функция ПарсингURL(Знач _url, _сервер, _порт, _https) Экспорт
	
	_сервер = "";
	_порт = Неопределено;
	_https = Ложь;
	Если (ТипЗнч(_url) <> Тип("Строка")) ИЛИ (ПустаяСтрока(_url)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	_url = СокрЛП(_url);
	Если Найти(ВРег(_url), "HTTPS://") = 1 Тогда
		_сервер = Сред(_url, 9);
		_https = Истина;
	ИначеЕсли Найти(ВРег(_url), "HTTP://") = 1 Тогда
		_сервер = Сред(_url, 8);
	Иначе
		_сервер = _url;
	КонецЕсли;
	
	м = СтрРазделить(_сервер, ":");
	Если м.Количество() = 2 Тогда
		_сервер = СокрЛП(м[0]);
		з = Цел(ОбщегоНазначения.СтрокаВЧисло(м[1], 0));
		Если (з > 0) И (з < 65536) Тогда
			_порт = з;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьТаймаут() Экспорт
	
	ст_кэш = КЭШ.Получить_Соответствие("ИнтернетЗапросы");
	_тайм = ст_кэш.Получить("Таймаут");
	Если ТипЗнч(_тайм) <> Тип("Число") Тогда
		_тайм = 180;
	КонецЕсли;
	_тайм = Цел(_тайм);
	Если _тайм < 5 Тогда
		_тайм = 5;
	ИначеЕсли _тайм > 180 Тогда
		_тайм = 180;
	КонецЕсли;
	Возврат _тайм;
	
КонецФункции

Функция ЗапонитьЗаголовкиЗапроса(_запрос, _файл = Неопределено)

	Если ТипЗнч(_запрос) <> Тип("HTTPЗапрос") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	_запрос.Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 10.0; WOW64; x64; rv:99.0) Gecko/20100101 Firefox/99.0");

	_боунд = _запрос.Заголовки.Получить("Boundary");
	Если (ОбщегоНазначения.ЭтоФайл(_файл)) И (ТипЗнч(_боунд) = Тип("Строка")) И (НЕ ПустаяСтрока(_боунд)) Тогда
		_запрос.Заголовки.Удалить("Boundary");
		_запрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + _боунд);
		_запрос.Заголовки.Вставить("Content-Transfer-Encoding", "binary");
		_запрос.Заголовки.Вставить("Expires", "0");
	Иначе
		_запрос.Заголовки.Вставить("Accept", "*/*");
		_запрос.Заголовки.Вставить("Accept-Language", "ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3");
		_запрос.Заголовки.Вставить("Accept-Encoding", "identity");
	КонецЕсли;

	_запрос.Заголовки.Вставить("Connection", "close");
	_запрос.Заголовки.Вставить("Cache-Control", "no-store, no-cache, max-age=0");
	_запрос.Заголовки.Вставить("Pragma", "no-cache");

	ст_кэш = КЭШ.Получить_Соответствие("ИнтернетЗапросы");
	ст = ст_кэш.Получить("Заголовки");
	Если ТипЗнч(ст) = Тип("Соответствие") Тогда
		Для Каждого _кз Из ст Цикл
			_запрос.Заголовки.Вставить(_кз.Ключ, _кз.Значение);
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПроверитьСоздатьТовар(Знач СписокТоваров)
	
	Для каждого Стр из СписокТоваров Цикл
		
		Попытка
		УИД = Стр.goodUID;
		Артикул = Стр.goodArticle;
		Наименование = Стр.goodName;
		БазоваяЕдиница = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(СокрЛП(Стр.baseunit));
		Попытка
			Упаковка = Стр.packUID;
			Ккор = Стр.packAmount;
		Исключение
			Упаковка = "";
			Ккор = 1;
		КонецПопытки;
		Площадь = Стр.baseunitsquare;
		Объем = Стр.baseunitvolume;
		Длина = Стр.baseunitlength;
		Вес = Стр.baseunitweight;
		
		ЗапросТ = Новый Запрос;
		ЗапросТ.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Товары.Ссылка КАК Товар
		|ИЗ
		|	Справочник.Товары КАК Товары
		|ГДЕ
		|	Товары.Артикул = &Артикул
		|	И НЕ Товары.ПометкаУдаления";
		ЗапросТ.УстановитьПараметр("Артикул", СокрЛП(Артикул));
		Результат = ЗапросТ.Выполнить().Выгрузить();		
		
		Если Результат.Количество() <= 0 Тогда
			
			ГруппаТоваров = Справочники.Товары.НайтиПоНаименованию("СДЭК-ГЛОБАЛ");
			
			УстановитьПривилегированныйРежим(Истина);
			НовыйОбъект = Справочники.Товары.СоздатьЭлемент();
			НовыйОбъект.Родитель = ГруппаТоваров;
			НовыйОбъект.ДатаСоздания = ТекущаяДата();
			НовыйОбъект.Сертификат = Справочники.Сертификат.БезСертификата;
			НовыйОбъект.Наименование = Наименование;
			НовыйОбъект.КраткоеНаименование = Наименование;
			НовыйОбъект.АртикулВнеш = УИД;
			НовыйОбъект.Артикул = Артикул;
			НовыйОбъект.Ккор = Ккор;
			НовыйОбъект.Записать();
			
			НовыйОбъектЕдиница = Справочники.Единицы.СоздатьЭлемент();
			НовыйОбъектЕдиница.Владелец = НовыйОбъект.Ссылка;
			НовыйОбъектЕдиница.Наименование = БазоваяЕдиница.НаименованиеПолное;
			НовыйОбъектЕдиница.ЕдИзм = Перечисления.ЕдиницыИзмерения.Штука;   
			НовыйОбъектЕдиница.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(БазоваяЕдиница);
			НовыйОбъектЕдиница.Вес = Вес;
			НовыйОбъектЕдиница.Длина = Длина;
			НовыйОбъектЕдиница.Объем = Объем;
			НовыйОбъектЕдиница.К = 1;
			НовыйОбъектЕдиница.Записать();
			
			НовыйОбъект.БазоваяЕдиница = НовыйОбъектЕдиница.Ссылка;
			НовыйОбъект.Записать();
			
			
			Если Упаковка <> "" Тогда
				
				НовыйОбъектЕдиница = Справочники.Единицы.СоздатьЭлемент();
				НовыйОбъектЕдиница.Владелец = НовыйОбъект.Ссылка;
				НовыйОбъектЕдиница.Наименование = Упаковка;
				НовыйОбъектЕдиница.К = Ккор;
				НовыйОбъектЕдиница.Записать();
				
			КонецЕсли; 
			
			РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК","Создан новый элемент справочника Товары","ЭкспортСДЭК",Новый Структура("Товар",НовыйОбъект.Ссылка)); 
			
		КонецЕсли; 			
	Исключение
		РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК","ОШИБКА при создании элемента справочника Товары - " + Стр.goodUID,"ЭкспортСДЭК",СписокТоваров);
		Возврат ЛОЖЬ;	
	КонецПопытки;
	
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьСоздатьДокументы(СписокДокументов,НомерСообщения)
	
	Для каждого Стр из СписокДокументов Цикл
		
		Если Стр.orderType = "supply order" ИЛИ (Стр.orderType = "move order" И Стр.receiver = "РМ НОВОСИБИРСК (СОХ)") Тогда //ЗП, Инвойс
			
			Основание = Стр.number;
			Фирма = Константы.ОсновнаяФирма.Получить();
			ЮрЛицо = Справочники.ЮрЛица.НайтиПоНаименованию("СДЭК-ГЛОБАЛ ООО");
			ЗапросС = Новый Запрос;
			ЗапросС.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Склады.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	Склады.ЮрЛицоПоклажедатель = &ЮрЛицоПоклажедатель
			|	И Склады.ВидСкл = &ВидСкл";
			
			ЗапросС.УстановитьПараметр("ВидСкл", Перечисления.ВидыСклада.Свой);
			ЗапросС.УстановитьПараметр("ЮрЛицоПоклажедатель", ЮрЛицо);
			
			РезультатЗапроса = ЗапросС.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Склад = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
			
			ЗапросК = Новый Запрос;
			ЗапросК.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	КлиентыНастройкиОтправки.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Клиенты.НастройкиОтправки КАК КлиентыНастройкиОтправки
			|ГДЕ
			|	КлиентыНастройкиОтправки.Юрлицо = &Юрлицо";
			
			ЗапросК.УстановитьПараметр("ЮрЛицо", ЮрЛицо);
			
			РезультатЗапроса = ЗапросК.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Клиент = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
			
			НачатьТранзакцию();
			Попытка	
				
				ЗапросИ = Новый Запрос;
				ЗапросИ.Текст = "ВЫБРАТЬ
				|	Инвойс.Ссылка КАК Документ,
				|	ВЫБОР
				|		КОГДА ПриходнаяКС.Ссылка ЕСТЬ NULL
				|			ТОГДА 0
				|		ИНАЧЕ 1
				|	КОНЕЦ КАК Подтверждён
				|ИЗ
				|	Документ.Инвойс КАК Инвойс
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяКС КАК ПриходнаяКС
				|		ПО Инвойс.Ссылка = ПриходнаяКС.ДокументОснование
				|			И (НЕ ПриходнаяКС.ПометкаУдаления)
				|ГДЕ
				|	Инвойс.Проведен
				|	И Инвойс.Основание = &Основание
				|	И Инвойс.Дата >= &НачалоГода";
				ЗапросИ.УстановитьПараметр("Основание",	Основание);
				ЗапросИ.УстановитьПараметр("НачалоГода", НачалоГода(ТекущаяДата()));		
				Результат = ЗапросИ.Выполнить().Выгрузить();
				
				Если Результат.Количество() <> 0 Тогда
					Если Результат[0].Подтверждён = 1 Тогда
						ОтменитьТранзакцию();
						РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК","Инвойс ранее загружен на основании документа/файла поставщика (" + Основание + ") и подтверждён!","ЭкспортСДЭК",СписокДокументов); 
						Продолжить;
					КонецЕсли;
					
					Документ = Результат[0].Документ;
					ДокументОбъект = Документ.ПолучитьОбъект();
					ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					ДокументОбъект.ТабличнаяЧасть.Очистить();		
					
				Иначе
					ДокументОбъект = Документы.Инвойс.СоздатьДокумент();
					ДокументОбъект.Дата				= ТекущаяДата();
					ДокументОбъект.Фирма			= Фирма;
					ДокументОбъект.ЮрЛицо			= ЮрЛицо;
					ДокументОбъект.ГрузоОтправитель	= ЮрЛицо;
					ДокументОбъект.Склад			= Склад;
					ДокументОбъект.Основание		= Основание;
					ДокументОбъект.НомерПриказа		= Основание;
					ДокументОбъект.ДатаПриказа		= ТекущаяДата();
					ДокументОбъект.ДатаПрибытия		= ТекущаяДата();						
				КонецЕсли;
				
				Если Стр.status = "cancelled" Тогда
					
					ДокументОбъект.УстановитьПометкуУдаления(Истина);
					РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК","Документ помечен на удаление т.к. статус Отменен " + ДокументОбъект.Ссылка,"ЭкспортСДЭК",Новый Структура("Документ",ДокументОбъект.Ссылка));
					Продолжить;
					
				КонецЕсли;
				
				Для каждого СтрТов Из Стр.goods Цикл	
					ЗапросТ = Новый Запрос;
					ЗапросТ.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
					|	Товары.Ссылка КАК Товар
					|ИЗ
					|	Справочник.Товары КАК Товары
					|ГДЕ
					|	Товары.АртикулВнеш = &АртикулВнеш
					|	И НЕ Товары.ПометкаУдаления";
					ЗапросТ.УстановитьПараметр("АртикулВнеш", СокрЛП(СтрТов.goodUID));
					Результат = ЗапросТ.Выполнить().Выгрузить();
					
					Если Результат.Количество() > 0 Тогда
						Товар = Результат[0].Товар;
					Иначе
						ОтменитьТранзакцию();
						РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК","Не найден элемент справочника Товары - " + СокрЛП(СтрТов.goodUID),"ЭкспортСДЭК",СписокДокументов); 
						Возврат ЛОЖЬ;
					КонецЕсли;
					
					КоличествоТовара   = СтрТов.amount;	
					ЕдТов			   = Товар.БазоваяЕдиница;
					НайденаяСтрокаТабЧ = ДокументОбъект.ТабличнаяЧасть.Найти(Товар, "Товар");
					Если НайденаяСтрокаТабЧ = Неопределено Тогда		
						НовСтр = ДокументОбъект.ТабличнаяЧасть.Добавить();
						НовСтр.Товар 	  = Товар;
						НовСтр.Коэфф 	  = ЕдТов.К;
						НовСтр.Единица 	  = ЕдТов;
						НовСтр.Партия	  = "";
						НовСтр.Количество = КоличествоТовара;
					Иначе
						НайденаяСтрокаТабЧ.Количество = НайденаяСтрокаТабЧ.Количество + КоличествоТовара;
					КонецЕсли;
				КонецЦикла;
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				РегистрыСведений.Интеграция_ДопРеквизиты.СоздатьЗапись(ДокументОбъект.Ссылка,"department",Стр.department);
				РегистрыСведений.Интеграция_ДопРеквизиты.СоздатьЗапись(ДокументОбъект.Ссылка,"orderUID",Стр.orderUID);
				РегистрыСведений.Интеграция_ДопРеквизиты.СоздатьЗапись(ДокументОбъект.Ссылка,"sender",Стр.sender);
				РегистрыСведений.Интеграция_ДопРеквизиты.СоздатьЗапись(ДокументОбъект.Ссылка,"orderType",Стр.orderType);
				РегистрыСведений.Интеграция_ДопРеквизиты.СоздатьЗапись(ДокументОбъект.Ссылка,"message",НомерСообщения);
				
				РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК","Создан новый Документ Инвойс - " + ДокументОбъект.Номер,"ЭкспортСДЭК",Новый Структура("Инвойс",ДокументОбъект.Ссылка));
				
			Исключение
				ОтменитьТранзакцию();
				РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК","Ошибка создания документа поставщика - " + ОписаниеОшибки(),"ЭкспортСДЭК",СписокДокументов);
				Возврат ЛОЖЬ;
			КонецПопытки;
			
			
		ИначеЕсли Стр.orderType = "сustomer order" ИЛИ Стр.orderType = "move order" ИЛИ Стр.orderType = "domestic order" Тогда
			
			Основание = Стр.number;
			ОснованиеНомер = "" + СокрЛП(Стр.orderNumberEK5) + "(" + Стр.number + ")";  
			Фирма = Константы.ОсновнаяФирма.Получить();
			ЮрЛицо = Справочники.ЮрЛица.НайтиПоНаименованию("СДЭК-ГЛОБАЛ ООО");
			ЗапросС = Новый Запрос;
			ЗапросС.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Склады.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	Склады.ЮрЛицоПоклажедатель = &ЮрЛицоПоклажедатель
			|	И Склады.ВидСкл = &ВидСкл";
			
			ЗапросС.УстановитьПараметр("ВидСкл", Перечисления.ВидыСклада.Свой);
			ЗапросС.УстановитьПараметр("ЮрЛицоПоклажедатель", ЮрЛицо);
			
			РезультатЗапроса = ЗапросС.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Склад = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
			
			ЗапросК = Новый Запрос;
			ЗапросК.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	КлиентыНастройкиОтправки.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Клиенты.НастройкиОтправки КАК КлиентыНастройкиОтправки
			|ГДЕ
			|	КлиентыНастройкиОтправки.Юрлицо = &Юрлицо";
			
			ЗапросК.УстановитьПараметр("ЮрЛицо", ЮрЛицо);
			
			РезультатЗапроса = ЗапросК.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Клиент = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Отделы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Отделы КАК Отделы
			|ГДЕ
			|	Отделы.Наименование = &Наименование
			|	И Отделы.ПометкаУдаления = ЛОЖЬ";	
			Запрос.УстановитьПараметр("Наименование", СокрЛП(Стр.receiver));	
			РезультатЗапроса = Запрос.Выполнить().Выгрузить();
			
			Попытка
				Отдел = РезультатЗапроса[0].Ссылка;
			Исключение
			КонецПопытки;
			
			Попытка
				Если НЕ ЗначениеЗаполнено(Отдел) Тогда
					НовыйОтдел = Справочники.Отделы.СоздатьЭлемент();
					НовыйОтдел.Наименование = СокрЛП(Стр.receiver);
					НовыйОтдел.Владелец = Клиент;
					НовыйОтдел.Фирма = Фирма;
					НовыйОтдел.Записать();
					Отдел = НовыйОтдел.Ссылка;
					РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК","Создан отдел, требуется заполнить адрес!","ЭкспортСДЭК",Новый Структура("Отдел",НовыйОтдел.Ссылка)); 
				КонецЕсли;
			Исключение
				РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК","Не удалось создать отдел - " + Стр.receiver + " Ошибка: " + ОписаниеОшибки(),"ЭкспортСДЭК",СписокДокументов); 
			КонецПопытки;
			
			НачатьТранзакцию();	
			
			Попытка			
				
				ЗапросД = Новый Запрос;
				ЗапросД.Текст = "ВЫБРАТЬ
				                |	РасходнаяКС.Ссылка КАК Документ
				                |ИЗ
				                |	Документ.РасходнаяКС КАК РасходнаяКС
				                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Интеграция_ДопРеквизиты КАК Интеграция_ДопРеквизиты
				                |		ПО (Интеграция_ДопРеквизиты.Документ = РасходнаяКС.Ссылка)
				                |ГДЕ
				                |	РасходнаяКС.Проведен
				                |	И РасходнаяКС.НомерДокументаПоставщика = &Основание
				                |	И Интеграция_ДопРеквизиты.Имя = &ИмяДопРеквизита
				                |	И Интеграция_ДопРеквизиты.Значение = &ЗначениеДопРеквизита";
				ЗапросД.УстановитьПараметр("Основание",  Основание);
				ЗапросД.УстановитьПараметр("ИмяДопРеквизита",  "orderType");
				ЗапросД.УстановитьПараметр("ЗначениеДопРеквизита",  Стр.orderType);
				Результат = ЗапросД.Выполнить().Выгрузить();
				НовыйДок = Истина;
				
				
				Если Результат.Количество() <> 0 Тогда			
					//СообщитьУниверсальный("Документ (" + Результат[0].Документ + ") ранее загружался на основании документа/файла поставщика (" + Распоряжение + ")!", Истина);
					СтатусДок = ОбщегоНазначения.ТекСтатусДокумента(Результат[0].Документ);
					Если СтатусДок = Перечисления.ВидыСтатусДокумента.Новый 
						ИЛИ СтатусДок = Перечисления.ВидыСтатусДокумента.Подготовлен
						ИЛИ СтатусДок = Перечисления.ВидыСтатусДокумента.Утвержден Тогда
						Документ	   = Результат[0].Документ;
						ДокументОбъект = Документ.ПолучитьОбъект();			
						ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
						ДокументОбъект.ТабличнаяЧасть.Очистить();
						НовыйДок = Ложь;
					Иначе
						ОтменитьТранзакцию();
						РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК","Документ (" + Результат[0].Документ + ") ранее загружался и находится в статусе " + СтатусДок,"ЭкспортСДЭК",Новый Структура("Документ",Результат[0].Документ));
						Продолжить;	
					КонецЕсли;
					
				Иначе
					ДокументНовый = Документы.РасходнаяКС.СоздатьДокумент();
					
					ДокументНовый.Фирма = Фирма;
					ДокументНовый.ЮрЛицо = ЮрЛицо;
					ДокументНовый.АдресДоставки = СокрЛП(Стр.senderAddress);
					ДокументНовый.Склад = Склад;
					ДокументНовый.Дата = ТекущаяДата();
					//ДокументНовый.Основание = Основание;
					ДокументНовый.Основание = ОснованиеНомер;
					ДокументНовый.Отдел = Отдел;
					ДокументНовый.НомерДокументаПоставщика = Основание;
					ДокументНовый.СтатусДокумента = Перечисления.ВидыСтатусДокумента.Подготовлен;
					ДокументНовый.ВидПроводки = Перечисления.ВидПроводки.КакСчет;
					НовыйДок = Истина;
					
					ДокументОбъект = ДокументНовый;
					
				КонецЕсли;
				
				Если Стр.status = "cancelled" Тогда
					
					ДокументОбъект.УстановитьПометкуУдаления(Истина);
					РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК","Документ помечен на удаление т.к. статус Отменен " + ДокументОбъект.Ссылка,"ЭкспортСДЭК",Новый Структура("Документ",ДокументОбъект.Ссылка));
					ЗафиксироватьТранзакцию();
					Продолжить;
					
				КонецЕсли;
				
				ДокументОбъект.ТабличнаяЧасть.Очистить();
				
				Для каждого СтрТов Из Стр.goods Цикл
					
					ЗапросТ = Новый Запрос;
					ЗапросТ.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
					|	Товары.Ссылка КАК Товар
					|ИЗ
					|	Справочник.Товары КАК Товары
					|ГДЕ
					|	Товары.АртикулВнеш = &АртикулВнеш
					|	И НЕ Товары.ПометкаУдаления";
					ЗапросТ.УстановитьПараметр("АртикулВнеш", СокрЛП(СтрТов.goodUID));
					Результат = ЗапросТ.Выполнить().Выгрузить();
					
					Если Результат.Количество() > 0 Тогда
						Товар = Результат[0].Товар;
					Иначе
						ОтменитьТранзакцию();
						РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК","Не найден элемент справочника Товары - " + СокрЛП(СтрТов.goodUID),"ЭкспортСДЭК",СписокДокументов); 
						Возврат ЛОЖЬ;
					КонецЕсли;
					КоличествоТовара = СтрТов.amount;
					
					ЕдТов = Товар.БазоваяЕдиница;
					
					ПроцентНДС = ОбщегоНазначения.ПолучитьПроцентНДСТовара(Товар, ТекущаяДата());
					
					НайденаяСтрокаТабЧ = ДокументОбъект.ТабличнаяЧасть.Найти(Товар, "Товар");
					ТекОстаток = ОбщегоНазначения.ПолучитьОстатокТовара(Товар,Склад,,Истина,Истина);
					
					Если ЕдТов = Справочники.Единицы.ПустаяСсылка() Тогда 
						ЕдТовК = 1;
					Иначе 
						ЕдТовК = ЕдТов.К;
					КонецЕсли;
					
					ЗаказШт = КоличествоТовара * ЕдТовК;	
					
					Если НайденаяСтрокаТабЧ = Неопределено Тогда		
						НовСтр = ДокументОбъект.ТабличнаяЧасть.Добавить();
						НовСтр.Товар	  = Товар;
						НовСтр.Коэфф	  = ЕдТовК;
						НовСтр.Единица	  = ЕдТов;
						НовСтр.Количество = ?(ЗаказШт > ТекОстаток, Цел(ТекОстаток / ЕдТовК), КоличествоТовара);
						НовСтр.Заявлено	  = КоличествоТовара
					Иначе
						НайденаяСтрокаТабЧ.Количество = ?(НайденаяСтрокаТабЧ.Количество + КоличествоТовара > ТекОстаток, ТекОстаток, НайденаяСтрокаТабЧ.Количество + КоличествоТовара);
						НайденаяСтрокаТабЧ.Заявлено = НайденаяСтрокаТабЧ.Заявлено + КоличествоТовара;
					КонецЕсли;
					
				КонецЦикла;
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				РегистрыСведений.Интеграция_ДопРеквизиты.СоздатьЗапись(ДокументОбъект.Ссылка,"department",Стр.department);
				РегистрыСведений.Интеграция_ДопРеквизиты.СоздатьЗапись(ДокументОбъект.Ссылка,"orderUID",Стр.orderUID);
				РегистрыСведений.Интеграция_ДопРеквизиты.СоздатьЗапись(ДокументОбъект.Ссылка,"sender",Стр.sender);
				РегистрыСведений.Интеграция_ДопРеквизиты.СоздатьЗапись(ДокументОбъект.Ссылка,"orderType",Стр.orderType);
				РегистрыСведений.Интеграция_ДопРеквизиты.СоздатьЗапись(ДокументОбъект.Ссылка,"message",НомерСообщения);
				Если НовыйДок Тогда
					РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК","Создан новый Документ РКС - " + ДокументОбъект.Номер,"ЭкспортСДЭК",Новый Структура("РКС",ДокументОбъект.Ссылка));
				Иначе
					РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК","Обновлен Документ РКС - " + ДокументОбъект.Номер,"ЭкспортСДЭК",Новый Структура("РКС",ДокументОбъект.Ссылка));
				КонецЕсли;
			Исключение
				ОтменитьТранзакцию();
				РегистрыСведений.ТехническийЖурнал.ДобавитьСообщение("ЭкспортСДЭК","Ошибка создания документа поставщика - " + ОписаниеОшибки(),"ЭкспортСДЭК",СписокДокументов);
				Возврат ЛОЖЬ;
			КонецПопытки;
					
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
	Возврат ИСТИНА;
	
КонецФункции

Функция фПрочитатьJSON(ТекстJSON) Экспорт
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ТекстJSON);
	Структура = ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
	Чтение.Закрыть();
	Возврат Структура;
КонецФункции

Функция ЗаполнитьСтруктуруИзОтветаJSON(Знач Чтение) Экспорт
	Результат = Новый Структура;
	
	ПоследнееИмяРеквизита = Неопределено;
	
	Пока Чтение.Прочитать() Цикл
		Тип = Чтение.ТипТекущегоЗначения;
		Если Тип = ТипЗначенияJSON.НачалоОбъекта И ПоследнееИмяРеквизита<>Неопределено Тогда 
			Результат[ПоследнееИмяРеквизита] = ЗаполнитьСтруктуруИзОтветаJSON(Чтение);
		ИначеЕсли Тип = ТипЗначенияJSON.КонецОбъекта Тогда 
			Возврат Результат;
			ПоследнееИмяРеквизита = Неопределено;
		ИначеЕсли Тип = ТипЗначенияJSON.ИмяСвойства Тогда 
			Результат.Вставить(Чтение.ТекущееЗначение, Неопределено);
			ПоследнееИмяРеквизита = Чтение.ТекущееЗначение;
		ИначеЕсли Тип = ТипЗначенияJSON.Булево или Тип = ТипЗначенияJSON.Строка
			или Тип = ТипЗначенияJSON.Число или Тип = ТипЗначенияJSON.Null Тогда 
			Результат[ПоследнееИмяРеквизита] = Чтение.ТекущееЗначение;
		ИначеЕсли Тип = ТипЗначенияJSON.НачалоМассива Тогда 
			Результат[ПоследнееИмяРеквизита] = ЗаполнитьМассивИзОтветаJSON(Чтение);
		КонецЕсли;
	КонецЦикла;  
	
	Возврат Результат;
КонецФункции

Функция ЗаполнитьМассивИзОтветаJSON(Знач Чтение)
	Результат = Новый Массив;
	
	Пока Чтение.Прочитать() Цикл
		Тип = Чтение.ТипТекущегоЗначения;
		Если Тип = ТипЗначенияJSON.НачалоОбъекта Тогда 
			Результат.Добавить(ЗаполнитьСтруктуруИзОтветаJSON(Чтение));
		ИначеЕсли Тип = ТипЗначенияJSON.КонецМассива Тогда 
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;  
	
	Возврат Результат;
КонецФункции
